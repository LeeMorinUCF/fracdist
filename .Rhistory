summary(test_fpval[, 'pval'] - test_fpval[, 'pval_test'])
test_fpval[, 'pval_test'] <- NA
# for (row_num in 1:10) {
for (row_num in 1:nrow(test_fpval)) {
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
test_fpval[row_num, 'pval_test'] <- fracdist_out
}
summary(test_fpval)
summary(test_fpval[, 'pval'] - test_fpval[, 'pval_test'])
head(test_fpval)
head(test_fpval, 300)
colnames(test_fcval)
?fracdist_values
test_fcval[, 'cval_test'] <- NA
for (row_num in 1:10) {
# for (row_num in 1:nrow(test_fcval)) {
print(sprintf('Performing test case %d of %d.', row_num, nrow(test_fcval)))
fracdist_out <- fracdist_values(iq = test_fcval[row_num, 'iq'],
iscon = test_fcval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fcval[row_num, 'bb'],
# stat = NA,
ipc = FALSE,
clevel = test_fcval[row_num, 'clevel'])
test_fcval[row_num, 'cval_test'] <- fracdist_out
}
seq(nrow(test_fcval), by = 100)
nrow(test_fcval)
seq(1, nrow(test_fcval), by = 100))
seq(1, nrow(test_fcval), by = 100)
seq(0, nrow(test_fcval), by = 100)
# for (row_num in 1:10) {
for (row_num in 1:nrow(test_fcval)) {
if(row_num == seq(0, nrow(test_fcval), by = 100)) {
print(sprintf('Performing test case %d of %d.', row_num, nrow(test_fcval)))
}
fracdist_out <- fracdist_values(iq = test_fcval[row_num, 'iq'],
iscon = test_fcval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fcval[row_num, 'bb'],
# stat = NA,
ipc = FALSE,
clevel = test_fcval[row_num, 'clevel'])
test_fcval[row_num, 'cval_test'] <- fracdist_out
}
row_num
warnings()
# Inspect output.
summary(test_fcval)
head(test_fcval)
summary(test_fcval[, 'cval'] - test_fcval[, 'cval_test'])
summary(test_fcval[, 'cval'] - round(test_fcval[, 'cval_test'], 4))
sum(!(test_fcval[, 'cval'] == round(test_fcval[, 'cval_test'], 4)))
sum(!(test_fcval[, 'cval'] == round(test_fcval[, 'cval_test'], 4)),
na.rm = TRUE)
all(test_fcval[, 'cval'] == round(test_fcval[, 'cval_test'], 4))
plot(test_fcval[, 'cval'],
test_fcval[, 'cval_test'])
summary(test_fcval[, 'cval'] - round(test_fcval[, 'cval_test'], 4))
summary(test_fcval[, 'cval'] - round(test_fcval[, 'cval_test'], 3))
summary(test_fcval[, 'cval'] - round(test_fcval[, 'cval_test'], 2))
summary(round(test_fcval[, 'cval'], 3) - round(test_fcval[, 'cval_test'], 3))
summary(round(test_fcval[, 'cval'], 2) - round(test_fcval[, 'cval_test'], 2))
floor(1.23456, 3)
floor(1.23456)
floor(1.23456*10^3)/10^3
trunc(1.234, 2)
trunc(1.234, 3)
trunc(1.234567, 3)
trunc(1.234567, -3)
?trunc
sum(!(floor(test_fcval[, 'cval']*10^3)/10^3 ==
floor(test_fcval[, 'cval_test']*10^3)/10^3),
na.rm = TRUE)
summary(floor(test_fcval[, 'cval']*10^3)/10^3 -
floor(test_fcval[, 'cval_test']*10^3)/10^3)
summary(floor(test_fcval[, 'cval']*10^2)/10^2 -
floor(test_fcval[, 'cval_test']*10^2)/10^2)
summary(floor(test_fcval[, 'cval']*10)/10 -
floor(test_fcval[, 'cval_test']*10)/10)
summary(floor(test_fcval[, 'cval']*10^2)/10^2 -
floor(test_fcval[, 'cval_test']*10^2)/10^2)
summary(floor(test_fcval[, 'cval']*10^2)/10^2 -
round(test_fcval[, 'cval_test'], 2))
test_fpval[, 'pval_test'] <- NA
# for (row_num in 1:10) {
for (row_num in 1:nrow(test_fpval)) {
if(row_num %in% seq(0, nrow(test_fpval), by = 100)) {
print(sprintf('Performing test case %d of %d.', row_num, nrow(test_fpval)))
}
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
test_fpval[row_num, 'pval_test'] <- fracdist_out
}
row_num
fracdist_out
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
source(fracdist_lib_file)
row_num
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
source(fracdist_lib_file)
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
source(fracdist_lib_file)
row_num
# for (row_num in 1:10) {
# for (row_num in 1:nrow(test_fpval)) {
for (row_num in 399:nrow(test_fpval)) {
if(row_num %in% seq(0, nrow(test_fpval), by = 100)) {
print(sprintf('Performing test case %d of %d.', row_num, nrow(test_fpval)))
}
try(
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
)
if (!(fracdist_out == fracdist_out_last)) {
test_fpval[row_num, 'pval_test'] <- fracdist_out
fracdist_out_last <- fracdist_out
}
}
fracdist_out_last <- -7
# for (row_num in 1:10) {
# for (row_num in 1:nrow(test_fpval)) {
for (row_num in 399:nrow(test_fpval)) {
if(row_num %in% seq(0, nrow(test_fpval), by = 100)) {
print(sprintf('Performing test case %d of %d.', row_num, nrow(test_fpval)))
}
try(
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
)
if (!(fracdist_out == fracdist_out_last)) {
test_fpval[row_num, 'pval_test'] <- fracdist_out
fracdist_out_last <- fracdist_out
}
}
summary(test_fpval)
head(test_fpval)
tail(test_fpval)
summary(test_fpval[, 'pval'] - test_fpval[, 'pval_test'])
summary(test_fpval[, 'pval'] - round(test_fpval[, 'pval_test'], 4))
sum(!(test_fpval[, 'pval'] == round(test_fpval[, 'pval_test'], 4)))
sum(!(test_fpval[, 'pval'] == round(test_fpval[, 'pval_test'], 4)),
na.rm = TRUE)
all(test_fpval[, 'pval'] == round(test_fpval[, 'pval_test'], 4))
test_fpval[!(test_fpval[, 'pval'] == round(test_fpval[, 'pval_test'], 4), ]
test_fpval[!(test_fpval[, 'pval'] == round(test_fpval[, 'pval_test'], 4)), ]
test_fpval[!is.na(test_fpval[, 'pval_test']) &
!(test_fpval[, 'pval'] == round(test_fpval[, 'pval_test'], 4)), ]
!is.na(test_fpval[, 'pval_test'])
which(!is.na(test_fpval[, 'pval_test']))
which(is.na(test_fpval[, 'pval_test']))
test_fpval[is.na(test_fpval[, 'pval_test']), ]
tail(test_fpval[is.na(test_fpval[, 'pval_test']), ], 224)
sprintf('------%5.3f---', 123.45678)
sprintf('------%5.3f---', 123.45648)
sprintf('------%5.3f---', 123.45651)
sprintf('------%5.3f---', 123.456549)
sprintf('------%5.3f---', 123.456544449)
sprintf('------%5.3f---', 123.456444449)
sprintf('------%5.3f---', 123.456454449)
summary(test_fcval)
row_num
summary(test_fcval[, 'cval'] - test_fcval[, 'cval_test'])
summary(test_fcval[, 'cval'] - round(test_fcval[, 'cval_test'], 4))
sum(!(test_fcval[, 'cval'] == round(test_fcval[, 'cval_test'], 4)),
na.rm = TRUE)
all(test_fcval[, 'cval'] == round(test_fcval[, 'cval_test'], 4))
summary(floor(test_fcval[, 'cval']*10^2)/10^2 -
round(test_fcval[, 'cval_test'], 2))
summary(floor(test_fcval[, 'cval']*10)/10 -
floor(test_fcval[, 'cval_test']*10)/10)
summary(test_fcval[, 'cval'] - round(test_fcval[, 'cval_test'], 4))
summary(test_fcval[, 'cval'] - round(test_fcval[, 'cval_test'], 3))
summary(test_fcval[, 'cval'] - round(test_fcval[, 'cval_test'], 2))
summary(round(test_fcval[, 'cval'], 3) - round(test_fcval[, 'cval_test'], 3))
summary(round(test_fcval[, 'cval'], 2) - round(test_fcval[, 'cval_test'], 2))
summary(test_fcval[, 'cval'] - test_fcval[, 'cval_test'])
summary(test_fcval)
summary(test_fcval[is.na(test_fcval[, 'cval_test']), ])
head(test_fcval[is.na(test_fcval[, 'cval_test']), ])
tail(test_fcval[is.na(test_fcval[, 'cval_test']), ])
test_fpval[!is.na(test_fpval[, 'pval_test']) &
!(test_fpval[, 'pval'] == round(test_fpval[, 'pval_test'], 4)), ]
summary(test_fpval[, 'pval'] - round(test_fpval[, 'pval_test'], 4))
summary(test_fpval[, 'pval'] - floor(test_fpval[, 'pval_test']*10^4)/10^4))
summary(test_fpval[, 'pval'] - floor(test_fpval[, 'pval_test']*10^4)/10^4)
summary(test_fpval[, 'pval'] - floor(test_fpval[, 'pval_test']*10^3)/10^3)
summary(floor(test_fpval[, 'pval']*10^3)/10^3 -
floor(test_fpval[, 'pval_test']*10^3)/10^3)
summary(round(test_fpval[, 'pval'], 4) -
round(test_fpval[, 'pval_test'], 4))
summary(round(test_fpval[, 'pval'], 3) -
round(test_fpval[, 'pval_test'], 3))
summary(test_fpval[, 'pval'] - test_fpval[, 'pval_test'])
head(test_fpval[is.na(test_fpval[, 'pval_test']), ], 100)
row_num <- 415 # Test case missing.
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
source(fracdist_lib_file)
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
source(fracdist_lib_file)
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
test_fpval[row_num, 'stat']
iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat']
iq = test_fpval[row_num, 'iq']
iscon = test_fpval[row_num, 'iscon']
dir_name = data_dir
bb = test_fpval[row_num, 'bb']
stat = test_fpval[row_num, 'stat']
ipc = TRUE
frtab <- get_fracdist_tab(iq, iscon, dir_name)
bval <- unique(frtab[, 'bbb'])
bval <- bval[order(bval)]
probs <- unique(frtab[, 'probs'])
probs <- probs[order(probs)]
bval
probs
nb <- 31
np <- 221
bedf <- rep(NA, np)
for (i in 1:np) {
prob_i <- probs[i]
estcrit <- frtab[frtab[, 'probs'] == prob_i, 'xndf']
bedf[i] <- blocal(nb, bb, estcrit, bval)
}
bedf
ginv <- qchisq(probs, df = iq^2)
ginv
iq
test_fpval[row_num, ]
ipc
outval <- fpval(npts = 9, iq, stat, probs, bedf, ginv)
ndf
ndf <- iq**2
btiny <- 0.5*bedf[1]
bbig <- 2.0*bedf[221]
btiny
bbig
stat
stat < btiny
stat > bbig
diff <- abs(stat - bedf)
plot(diff)
plot(diff[1:10])
which.min(diff)[1]
which.min(diff)
imin <- which.min(diff)[1]
diffm <- diff[imin]
diffm
plot(diff[1:10], ylim = c(0, 2))
nph <- npts/2
npts = 9
nph <- npts/2
nptop <- 221 - nph
nph
nptop
# Create a dataset for interpolation by regression.
yx_mat <- data.frame(y = numeric(npts),
x1 = numeric(npts),
x2 = numeric(npts),
x3 = numeric(npts))
imin > nph
imin < nptop
imin
nph
nptop
ic <- imin - nph - 1 + seq(1, npts)
ic
length(ic)
ginv[ic]
ginv[1:10]
ginv[0.5]
ginv[1.5]
ginv[c(0.5, 1.5)]
ginv[c(0, 1.5)]
ginv[c(0, 1.4)]
ginv[c(0, 1.9)]
ginv[c(0, 1.9, 2.1)]
ginv[c(0, 1.9, 2.0, 2.1)]
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
source(fracdist_lib_file)
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
fracdist_out
head(test_fpval[is.na(test_fpval[, 'pval_test']), ], 100)
which(is.na(test_fpval[, 'pval_test']))
for (row_num in which(is.na(test_fpval[, 'pval_test']))) {
# for (row_num in 399:nrow(test_fpval)) {
if(row_num %in% seq(0, nrow(test_fpval), by = 100)) {
print(sprintf('Performing test case %d of %d.', row_num, nrow(test_fpval)))
}
try(
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
)
if (!(fracdist_out == fracdist_out_last)) {
test_fpval[row_num, 'pval_test'] <- fracdist_out
fracdist_out_last <- fracdist_out
}
}
source(fracdist_lib_file)
for (row_num in which(is.na(test_fpval[, 'pval_test']))) {
# for (row_num in 399:nrow(test_fpval)) {
if(row_num %in% seq(0, nrow(test_fpval), by = 100)) {
print(sprintf('Performing test case %d of %d.', row_num, nrow(test_fpval)))
}
try(
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
)
if (!(fracdist_out == fracdist_out_last)) {
test_fpval[row_num, 'pval_test'] <- fracdist_out
fracdist_out_last <- fracdist_out
}
}
summary(test_fpval)
head(test_fpval)
tail(test_fpval)
summary(test_fpval[, 'pval'] - test_fpval[, 'pval_test'])
summary(test_fpval[, 'pval'] - round(test_fpval[, 'pval_test'], 4))
all(test_fpval[, 'pval'] == round(test_fpval[, 'pval_test'], 4))
which(is.na(test_fpval[, 'pval_test']))
head(test_fpval[is.na(test_fpval[, 'pval_test']), ], 100)
tail(test_fpval[is.na(test_fpval[, 'pval_test']), ], 100)
test_fpval[!is.na(test_fpval[, 'pval_test']) &
!(test_fpval[, 'pval'] == round(test_fpval[, 'pval_test'], 4)), ]
summary(test_fpval[, 'pval'] - round(test_fpval[, 'pval_test'], 4))
head(test_fpval[is.na(test_fpval[, 'pval_test']), ], 10)
row_num <- 1240 # Test case missing.
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
fracdist_out
head(test_fpval[is.na(test_fpval[, 'pval_test']), ], 100)
for (row_num in which(is.na(test_fpval[, 'pval_test']))) {
if(row_num %in% seq(0, nrow(test_fpval), by = 100)) {
print(sprintf('Performing test case %d of %d.', row_num, nrow(test_fpval)))
}
try(
fracdist_out <- fracdist_values(iq = test_fpval[row_num, 'iq'],
iscon = test_fpval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fpval[row_num, 'bb'],
stat = test_fpval[row_num, 'stat'])
)
# if (!(fracdist_out == fracdist_out_last)) {
#   test_fpval[row_num, 'pval_test'] <- fracdist_out
#   fracdist_out_last <- fracdist_out
# }
# Record result, if successful.
test_fpval[row_num, 'pval_test'] <- fracdist_out
# Erase result in case next one not successful.
fracdist_out <- NA
}
summary(test_fpval)
summary(test_fpval[, 'pval'] - test_fpval[, 'pval_test'])
summary(test_fcval[, 'cval'] - test_fcval[, 'cval_test'])
summary(test_fcval[is.na(test_fcval[, 'cval_test']), ])
head(test_fcval[is.na(test_fcval[, 'cval_test']), ])
tail(test_fcval[is.na(test_fcval[, 'cval_test']), ])
which(is.na(test_fcval[, 'cval_test']))
row_num <- which(is.na(test_fcval[, 'cval_test']))[1]
row_num
fracdist_out <- fracdist_values(iq = test_fcval[row_num, 'iq'],
iscon = test_fcval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fcval[row_num, 'bb'],
# stat = NA,
ipc = FALSE,
clevel = test_fcval[row_num, 'clevel'])
fracdist_out
test_fcval[row_num, ]
for (row_num in which(is.na(test_fcval[, 'cval_test']))) {
# for (row_num in 1:nrow(test_fcval)) {
if(row_num %in% seq(0, nrow(test_fcval), by = 100)) {
print(sprintf('Performing test case %d of %d.', row_num, nrow(test_fcval)))
}
fracdist_out <- fracdist_values(iq = test_fcval[row_num, 'iq'],
iscon = test_fcval[row_num, 'iscon'],
dir_name = data_dir,
bb = test_fcval[row_num, 'bb'],
# stat = NA,
ipc = FALSE,
clevel = test_fcval[row_num, 'clevel'])
test_fcval[row_num, 'cval_test'] <- fracdist_out
}
summary(test_fcval)
head(test_fcval)
tail(test_fcval)
summary(test_fcval[, 'cval'] - test_fcval[, 'cval_test'])
summary(test_fcval[, 'cval'] - round(test_fcval[, 'cval_test'], 4))
sum(!(test_fcval[, 'cval'] == round(test_fcval[, 'cval_test'], 4)),
na.rm = TRUE)
all(test_fcval[, 'cval'] == round(test_fcval[, 'cval_test'], 4))
plot(test_fcval[, 'cval'],
test_fcval[, 'cval_test'])
hist(test_fcval[, 'cval_test'] -
test_fcval[, 'cval'])
hist(test_fcval[, 'cval_test'] -
test_fcval[, 'cval'], breaks = 50)
hist(test_fcval[, 'cval_test'] -
test_fcval[, 'cval'], breaks = 50, col = 'red')
summary(floor(test_fcval[, 'cval']*10^2)/10^2 -
round(test_fcval[, 'cval_test'], 2))
summary(floor(test_fcval[, 'cval']*10)/10 -
floor(test_fcval[, 'cval_test']*10)/10)
quantile(test_fcval[, 'cval_test'] -
test_fcval[, 'cval'],
probs = c(seq(0, 0.05, by = 0.01),
seq(0.95, 1, by = 0.01)))
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
library(rstudioapi)
rstudioapi::isAvailable("0.99.149")
has_devel()
devtools::session_info()
# Clear workspace.
rm(list=ls(all=TRUE))
library(devtools)
has_devel()
fcvar_dir <- '~/Research/FCVAR/GitRepo/fracdist'
fcvar_dir <- 'C:/Users/le279259/Documents/Research/FCVAR/GitRepo/fracdist'
setwd(fcvar_dir)
fracdist_dir <- '~/Research/FCVAR/GitRepo/fracdist'
fracdist_dir <- 'C:/Users/le279259/Documents/Research/FCVAR/GitRepo/fracdist'
setwd(fracdist_dir)
devtools::setup(path = fracdist_dir)
setup(path = fracdist_dir)
library(usethis)
usethis::setup(path = fracdist_dir)
library(available)
available('fracdist')
create_package()
fracdist_dir
create_package(path = fracdist_dir)
consT
pval_1 <- fracdist_values(iq = 1, iscon = 0, bb = 0.73, stat = 3.84)
pval_1 <- fracdist::_values(iq = 1, iscon = 0, bb = 0.73, stat = 3.84)
library(fracdist)
install.packages('fracdist')
devtools::install_github('LeeMorinUCF/fracdist')
fracdist_values(iq = 1, iscon = 0, bb = 0.73, stat = 3.84)
library(fracdist)
fracdist_values(iq = 1, iscon = 0, bb = 0.73, stat = 3.84)
fracdist::fracdist_values(iq = 1, iscon = 0, bb = 0.73, stat = 3.84)
rm(list=ls(all=TRUE))
fracdist::fracdist_values(iq = 1, iscon = 0, bb = 0.73, stat = 3.84)
# Rewrite with column names.
colnames(votingJNP2014)
# [1] "lib"    "pc"     "ir_can" "ir_us"  "un_can" "un_us"
# x1 is the only dataset used in the demo with the following variables:
colnames(votingJNP2014)[c(1, 3, 5)]
# [1] "lib"    "ir_can" "un_can"
x1 <- votingJNP2014[, c("lib", "ir_can", "un_can")]
devtools::load_all()
