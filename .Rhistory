xlab = 'Time, t',
ylim = c(yMinS, yMaxS),
type = 'l',
col = color_list[col_num])
abline(v = T, col = 'black', lwd = 3)
for (col_num in 2:ncol(seriesF)) {
lines(seriesF[, col_num],
col = color_list[col_num])
}
# Plot the equilibrium relation including forecasts.
plot(seriesF[, col_num],
main = 'Equilibrium Relation, including Forecast',
xlab = 'Time, t',
ylim = c(yMinEq, yMaxEq),
type = 'l',
col = 'black')
# Plot the series and forecast.
color_list <- rainbow(ncol(seriesF))
col_num <- 1
plot(seriesF[, col_num],
main = 'Series, including Forecast',
xlab = 'Time, t',
ylim = c(yMinS, yMaxS),
type = 'l',
col = color_list[col_num])
abline(v = T, col = 'black', lwd = 3)
for (col_num in 2:ncol(seriesF)) {
lines(seriesF[, col_num],
col = color_list[col_num])
}
# Plot the series and forecast.
color_list <- rainbow(ncol(seriesF))
col_num <- 1
plot(seriesF[, col_num],
main = 'Series, including Forecast',
xlab = 'Time, t',
ylab = 'Series',
ylim = c(yMinS, yMaxS),
type = 'l',
col = color_list[col_num])
abline(v = T, col = 'black', lwd = 3)
for (col_num in 2:ncol(seriesF)) {
lines(seriesF[, col_num],
col = color_list[col_num])
}
# Plot the equilibrium relation including forecasts.
plot(seriesF[, col_num],
main = 'Equilibrium Relation, including Forecast',
xlab = 'Time, t',
ylab = 'Equilibrium Relation',
ylim = c(yMinEq, yMaxEq),
type = 'l',
col = 'black')
yMinEq
yMaxEq
# Plot the equilibrium relation including forecasts.
plot(equilF,
main = 'Equilibrium Relation, including Forecast',
xlab = 'Time, t',
ylab = 'Equilibrium Relation',
ylim = c(yMinEq, yMaxEq),
type = 'l',
col = 'black')
# Plot the series and forecast.
color_list <- rainbow(ncol(seriesF))
col_num <- 1
plot(seriesF[, col_num],
main = 'Series, including Forecast',
xlab = 'Time, t',
ylab = 'Series',
ylim = c(yMinS, yMaxS),
type = 'l',
col = color_list[col_num])
abline(v = T, col = 'black', lwd = 3)
for (col_num in 2:ncol(seriesF)) {
lines(seriesF[, col_num],
col = color_list[col_num])
}
# Turn off plots for bootstrapping.
DefaultOpt$plotRoots <- 0
# Define estimation options for unrestricted model (alternative)
optUNR <- DefaultOpt
# Define estimation options for restricted model (null)
optRES <- DefaultOpt
optRES$R_Beta <- matrix(c(1, 0, 0), nrow = 1, ncol = 3)
# Number of bootstrap samples to generate
B <- 999
B <- 9
# Call to open the distributed processing (comment out if unavailable)
# matlabpool ('open',4) # for versions 2013a and earlier.
# parpool # for versions 2013b and later.
# [LRbs, H, mBS, mUNR] <- FCVARboot(x1, k, r, optRES, optUNR, B)
FCVARboot_out <- FCVARboot(x1, k, r, optRES, optUNR, B)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
# [LRbs, H, mBS, mUNR] <- FCVARboot(x1, k, r, optRES, optUNR, B)
FCVARboot_out <- FCVARboot(x1, k, r, optRES, optUNR, B)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
# [LRbs, H, mBS, mUNR] <- FCVARboot(x1, k, r, optRES, optUNR, B)
FCVARboot_out <- FCVARboot(x1, k, r, optRES, optUNR, B)
# Number of periods to simulate
T_sim <- 100
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
# Simulate data
xSim <- FCVARsim(x1, modelF, T_sim)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
# Simulate data
xSim <- FCVARsim(x1, modelF, T_sim)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
# Simulate data
xSim <- FCVARsim(x1, modelF, T_sim)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
x <- x1
# Simulate data
xSim <- FCVARsim(x1, modelF, T_sim)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
x <- x1
model <- m1r4
# Simulate data
xSim <- FCVARsim(x1, modelF, T_sim)
#--------------------------------------------------------------------------------
x <- x1
model <- m1r4
# Simulate data
xSim <- FCVARsim(x, model, T_sim)
opt$levelParam
p <- ncol(x)
opt <- model$options
cf  <- model$coeffs
d <- cf$db[1]
b <- cf$db[2]
err <- matrix(rnorm(NumPeriods*p), nrow = NumPeriods, ncol = p)
i
# append x with zeros to simplify calculations.
x <- rbind(x, rep(0, p))
T <- nrow(x)
opt$levelParam
y <- x - matrix(1, nrow = T, ncol = 1) %*% cf$muHat
z <- Lbk(y,d,1)
!is.null(cf$alphaHat)
z <- z + FracDiff( Lbk(y, b, 1), d - b ) %*% t(cf$PiHat)
opt$rConstant
opt$unrConstant
!is.null(cf$GammaHat)
k <- ncol(cf$GammaHat)/p
z <- z +  FracDiff(  Lbk( y , b, k)  , d) %*% t(cf$GammaHat)
opt$levelParam
z <- z + matrix(1, nrow = T, ncol = 1) %*% cf$muHat
# Add disturbance term
z[T,] <- z[T,] + err[i, ]
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
x <- x1
model <- m1r4
# Simulate data
xSim <- FCVARsim(x, model, T_sim)
summary(xSim)
plot(xSim)
yMaxS  <- max(xSim)
yMinS  <- min(xSim)
# Plot the series and forecast.
color_list <- rainbow(ncol(xSim))
col_num <- 1
plot(xSim[, col_num],
main = 'Series, including Forecast',
xlab = 'Time, t',
ylab = 'Series',
ylim = c(yMinS, yMaxS),
type = 'l',
col = color_list[col_num])
abline(v = T, col = 'black', lwd = 3)
for (col_num in 2:ncol(seriesF)) {
lines(seriesF[, col_num],
col = color_list[col_num])
}
legend(c('Support', 'Unemployment', 'Interest Rate'),
col = color_list)
legend('topleft',
c('Support', 'Unemployment', 'Interest Rate'),
col = color_list)
legend('topleft',
c('Support', 'Unemployment', 'Interest Rate'),
pch = 16,
col = color_list)
legend('topleft',
c('Support', 'Unemployment', 'Interest Rate'),
pch = 16,
fill = color_list)
# Plot the series and forecast.
color_list <- rainbow(ncol(xSim))
col_num <- 1
plot(xSim[, col_num],
main = 'Series, including Forecast',
xlab = 'Time, t',
ylab = 'Series',
ylim = c(yMinS, yMaxS),
type = 'l',
col = color_list[col_num])
abline(v = T, col = 'black', lwd = 3)
for (col_num in 2:ncol(seriesF)) {
lines(seriesF[, col_num],
col = color_list[col_num])
}
legend('topleft',
c('Support', 'Unemployment', 'Interest Rate'),
pch = 16,
fill = color_list)
# Plot the series and forecast.
color_list <- rainbow(ncol(xSim))
col_num <- 1
plot(xSim[, col_num],
main = 'Series, including Forecast',
xlab = 'Time, t',
ylab = 'Series',
ylim = c(yMinS, yMaxS),
type = 'l',
col = color_list[col_num])
abline(v = T, col = 'black', lwd = 3)
for (col_num in 2:ncol(seriesF)) {
lines(seriesF[, col_num],
col = color_list[col_num])
}
legend('topleft',
c('Support', 'Unemployment', 'Interest Rate'),
# pch = 16,
fill = color_list)
# Test rank 0 against rank 1
r1 <- 0
r2 <- 1
# Number of bootstrap samples to generate
B <- 999
B <- 9
# [LR_Rnk, H_Rnk, mBSr1, mBSr2] <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
FCVARbootRank_out <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
# Test rank 0 against rank 1
r1 <- 0
r2 <- 1
# Number of bootstrap samples to generate
B <- 999
B <- 9
# [LR_Rnk, H_Rnk, mBSr1, mBSr2] <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
FCVARbootRank_out <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
# Test rank 0 against rank 1
r1 <- 0
r2 <- 1
# Number of bootstrap samples to generate
B <- 999
B <- 9
# [LR_Rnk, H_Rnk, mBSr1, mBSr2] <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
FCVARbootRank_out <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
!is.null(cf$alphaHat)
opt$rConstant
model$coeffs
# Test rank 0 against rank 1
r1 <- 0
r2 <- 1
# Number of bootstrap samples to generate
B <- 999
B <- 9
# [LR_Rnk, H_Rnk, mBSr1, mBSr2] <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
FCVARbootRank_out <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
# Test rank 0 against rank 1
r1 <- 0
r2 <- 1
# Number of bootstrap samples to generate
B <- 999
B <- 9
# [LR_Rnk, H_Rnk, mBSr1, mBSr2] <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
FCVARbootRank_out <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
r1
r2
# Test rank 0 against rank 1
r1 <- 0
r2 <- 1
# Number of bootstrap samples to generate
B <- 999
B <- 9
# [LR_Rnk, H_Rnk, mBSr1, mBSr2] <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
FCVARbootRank_out <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
# Test rank 0 against rank 1
r1 <- 0
r2 <- 1
# Number of bootstrap samples to generate
B <- 999
B <- 9
# [LR_Rnk, H_Rnk, mBSr1, mBSr2] <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
FCVARbootRank_out <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
# Test rank 0 against rank 1
r1 <- 0
r2 <- 1
# Number of bootstrap samples to generate
B <- 999
B <- 9
# [LR_Rnk, H_Rnk, mBSr1, mBSr2] <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
FCVARbootRank_out <- FCVARbootRank(x1, k, DefaultOpt, r1, r2, B)
LR_Rnk <- FCVARbootRank_out$LR_Rnk
H_Rnk <- FCVARbootRank_out$H_Rnk
mBSr1 <- FCVARbootRank_out$mBSr1
mBSr2 <- FCVARbootRank_out$mBSr2
LR_Rnk
H_Rnk
mBSr1
mBSr2
FCVARbootRank_out
LR_Rnk <- FCVARbootRank_out$LR_Rnk
H_Rnk <- FCVARbootRank_out$H_Rnk
mBSr1 <- FCVARbootRank_out$mBSr1
mBSr2 <- FCVARbootRank_out$mBSr2
LR_Rnk
attributes(FCVARbootRank_out)
LR_Rnk <- FCVARbootRank_out$LRbs
H_Rnk <- FCVARbootRank_out$H
mBSr1 <- FCVARbootRank_out$mBS
mBSr2 <- FCVARbootRank_out$mUNR
LR_Rnk
LR_Rnk
LR_Rnk
LR_Rnk
LR_Rnk
H_Rnk
rankTestStats <- RankTests(x1, k, opt)
rankTestStats <- RankTests(x1, k, DefaultOpt)
cat(printf('P-value: \t %1.3f\n', rankTestStats$pv[1]))
cat(sprintf('P-value: \t %1.3f\n', rankTestStats$pv[1]))
rankTestStats
# Test restriction that political variables do not enter the
#   cointegrating relation(s).
# Turn off plots for bootstrapping.
DefaultOpt$plotRoots <- 0
# Define estimation options for unrestricted model (alternative)
optUNR <- DefaultOpt
# Define estimation options for restricted model (null)
optRES <- DefaultOpt
optRES$R_Beta <- matrix(c(1, 0, 0), nrow = 1, ncol = 3)
# Number of bootstrap samples to generate
B <- 999
B <- 9
# Call to open the distributed processing (comment out if unavailable)
# matlabpool ('open',4) # for versions 2013a and earlier.
# parpool # for versions 2013b and later.
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
# [LRbs, H, mBS, mUNR] <- FCVARboot(x1, k, r, optRES, optUNR, B)
FCVARboot_out <- FCVARboot(x1, k, r, optRES, optUNR, B)
warnings()
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
# [LRbs, H, mBS, mUNR] <- FCVARboot(x1, k, r, optRES, optUNR, B)
FCVARboot_out <- FCVARboot(x1, k, r, optRES, optUNR, B)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
# [LRbs, H, mBS, mUNR] <- FCVARboot(x1, k, r, optRES, optUNR, B)
FCVARboot_out <- FCVARboot(x1, k, r, optRES, optUNR, B)
!is.na(NULL)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
# [LRbs, H, mBS, mUNR] <- FCVARboot(x1, k, r, optRES, optUNR, B)
FCVARboot_out <- FCVARboot(x1, k, r, optRES, optUNR, B)
source('EstOptions.R')
source('FCVAR_estn.R')
source('FCVAR_lower.R')
source('FCVAR_higher.R')
# [LRbs, H, mBS, mUNR] <- FCVARboot(x1, k, r, optRES, optUNR, B)
FCVARboot_out <- FCVARboot(x1, k, r, optRES, optUNR, B)
LRbs <- FCVARboot_out$LRbs
H <- FCVARboot_out$H
mBS <- FCVARboot_out$mBS
mUNR <- FCVARboot_out$mUNR
LRbs
H
# Estimate kernel density
d <- density(LRbs) # returns the density data
plot(d) # plots the results
hist(LRbs)
d
# Plot bootstrap density with chi-squared density
plot(d,
main = 'bootstrap density with chi-squared density',
xlab = 'Likelihood Ratio Statistic')
# Plot bootstrap density with chi-squared density
plot(d,
main = 'bootstrap density with chi-squared density',
xlab = 'Likelihood Ratio Statistic',
lwd = 2,
col = 'blue')
# Estimate kernel density
LRbs_density <- density(LRbs)
# Plot bootstrap density with chi-squared density
plot(LRbs_density,
main = 'Bootstrap Density with Chi-squared Density',
xlab = 'Likelihood Ratio Statistic',
lwd = 2,
col = 'blue')
# Plot bootstrap density with chi-squared density
plot(LRbs_density,
main = c('Bootstrap Density with Chi-squared Density',
sprintf('(%d bootstrp samples and %d d.f.)',
B, H$df)),
xlab = 'Likelihood Ratio Statistic',
lwd = 2,
col = 'blue')
# Plot bootstrap density with chi-squared density
plot(LRbs_density,
main = c('Bootstrap Density with Chi-squared Density',
sprintf('(%d bootstrap samples and %d d.f.)',
B, H$df)),
xlab = 'Likelihood Ratio Statistic',
lwd = 2,
col = 'blue')
summary(LRbs_density$x)
LR_range <- seq(min(LRbs_density$x), max(LRbs_density$x), by = 0.01)
lines(LR_range,
dchisq(LR_range, df = H$df))
# Plot bootstrap density with chi-squared density
plot(LRbs_density,
main = c('Bootstrap Density with Chi-squared Density',
sprintf('(%d bootstrap samples and %d d.f.)',
B, H$df)),
xlab = 'Likelihood Ratio Statistic',
lwd = 2,
col = 'blue')
LR_range <- seq(min(LRbs_density$x), max(LRbs_density$x), by = 0.01)
lines(LR_range,
dchisq(LR_range, df = H$df),
col = 'red',
lwd = 2)
legend('topleft',
c('Bootstrap', 'Chi-squared'),
# pch = 16,
fill = c('blue','red'))
# Plot bootstrap density with chi-squared density
plot(LRbs_density,
main = c('Bootstrap Density with Chi-squared Density',
sprintf('(%d bootstrap samples and %d d.f.)',
B, H$df)),
xlab = 'Likelihood Ratio Statistic',
lwd = 2,
col = 'blue')
LR_range <- seq(min(LRbs_density$x), max(LRbs_density$x), by = 0.01)
lines(LR_range,
dchisq(LR_range, df = H$df),
col = 'red',
lwd = 2)
legend('topright',
c('Bootstrap', 'Chi-squared'),
# pch = 16,
fill = c('blue','red'))
library(Rcpp)
sourceCpp('Rcppp_tests/X_c_gen_v2.cpp')
sourceCpp('Rcpp_tests/X_c_gen_v2.cpp')
